"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = (0, tslib_1.__importDefault)(require("react"));
const omit_1 = (0, tslib_1.__importDefault)(require("lodash/omit"));
const keys_1 = (0, tslib_1.__importDefault)(require("lodash/keys"));
const get_1 = (0, tslib_1.__importDefault)(require("lodash/get"));
const Contexts_1 = require("../Contexts");
const types_1 = require("../types");
const lodash_1 = require("lodash");
class Field extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.focus = () => {
            if (!this.input.focus) {
                throw new Error("Field doesn't has a focus method");
            }
            this.input.focus();
        };
    }
    getFieldName(parentFieldName) {
        if (parentFieldName) {
            if (this.props.fieldName) {
                return `${parentFieldName}.${this.props.fieldName}`;
            }
            else {
                return parentFieldName;
            }
        }
        else {
            return this.props.fieldName;
        }
    }
    getComponent() {
        return this.props.type;
    }
    getErrorMessage(errorMessages, parentFieldName) {
        return (this.props.errorMessage ||
            errorMessages[this.getFieldName(parentFieldName)] ||
            (0, get_1.default)(errorMessages, this.getFieldName(parentFieldName)));
    }
    getChildProps({ value, parentFieldName, onChange, errorMessages }) {
        const fieldComponent = this.getComponent();
        const propOptions = (0, omit_1.default)(this.props, ['fieldName', 'type', 'errorMessage']);
        const allowedKeys = (0, lodash_1.union)((0, keys_1.default)({ ...fieldComponent.propTypes }), types_1.fieldPropsKeys);
        allowedKeys.push('type');
        const notDefinedOptions = (0, omit_1.default)(propOptions, allowedKeys);
        const props = {
            value: (0, get_1.default)(value || {}, this.props.fieldName),
            parentValue: value || {},
            onChange: newValue => onChange(this.getFieldName(parentFieldName), newValue),
            errorMessage: this.getErrorMessage(errorMessages || {}, parentFieldName),
            fieldName: this.getFieldName(parentFieldName),
            passProps: notDefinedOptions,
            ...propOptions
        };
        return props;
    }
    renderComponent(info) {
        const Component = this.getComponent();
        const props = this.getChildProps(info);
        const ref = Component.prototype.render ? { ref: input => (this.input = input) } : {};
        return (react_1.default.createElement(Contexts_1.ValueContext.Provider, { value: props.value },
            react_1.default.createElement(Component, { ...ref, ...props })));
    }
    render() {
        return (react_1.default.createElement(Contexts_1.ValueContext.Consumer, null, value => (react_1.default.createElement(Contexts_1.ErrorMessagesContext.Consumer, null, errorMessages => (react_1.default.createElement(Contexts_1.OnChangeContext.Consumer, null, onChange => (react_1.default.createElement(Contexts_1.ParentFieldNameContext.Consumer, null, parentFieldName => this.renderComponent({
            value,
            parentFieldName,
            onChange,
            errorMessages
        })))))))));
    }
}
exports.default = Field;
//# sourceMappingURL=index.js.map