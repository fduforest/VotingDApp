"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = (0, tslib_1.__importDefault)(require("react"));
const Form_1 = (0, tslib_1.__importDefault)(require("../Form"));
const Field_1 = (0, tslib_1.__importDefault)(require("../Field"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
test('should call focus on child', () => {
    let didCall = false;
    let field = null;
    class DummyInput extends react_1.default.Component {
        focus() {
            didCall = true;
        }
        render() {
            return react_1.default.createElement("input", { className: "input", type: "text" });
        }
    }
    (0, react_2.render)(react_1.default.createElement(Form_1.default, null,
        react_1.default.createElement(Field_1.default, { ref: handle => (field = handle), fieldName: "name", type: DummyInput })));
    field.focus();
    expect(didCall).toBe(true);
});
test('should pass parent value', () => {
    let checked = false;
    function DummyInput(props) {
        checked = true;
        expect(props.parentValue).toEqual({ hello: 'world' });
        return react_1.default.createElement("div", null);
    }
    (0, react_2.render)(react_1.default.createElement(Form_1.default, { state: { hello: 'world' } },
        react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput })));
    expect(checked).toBe(true);
});
test('should be able to add any prop to the field', () => {
    let checked = false;
    function DummyInput(props) {
        checked = true;
        expect(props.parentValue).toEqual({ hello: 'world' });
        return null;
    }
    (0, react_2.render)(react_1.default.createElement(Form_1.default, { state: { hello: 'world' } },
        react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput, passingProp: 100 })));
    expect(checked).toBe(true);
});
//# sourceMappingURL=index.test.js.map