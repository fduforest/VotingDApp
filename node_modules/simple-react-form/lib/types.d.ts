import React from 'react';
export interface FieldProps {
    fieldName?: string;
    type?: any;
    value?: any;
    label?: React.ReactNode;
    errorMessage?: string;
    onChange?: (newValue: any) => any;
    disabled?: boolean;
    fieldSchema?: object;
    schema?: object;
    passProps?: object;
    [key: string]: any;
}
declare type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
export declare type FormFieldProps = WithRequired<FieldProps, 'fieldName' | 'type'>;
export declare const fieldPropsKeys: string[];
export declare type FormProps = Omit<React.HTMLProps<HTMLFormElement>, 'onChange'> & {
    children: React.ReactNode;
    state?: object;
    onChange?: Function;
    errorMessages?: object;
    useFormTag?: boolean;
    onSubmit?: (value: object) => any;
};
export interface FormRef {
    submit: () => any;
    getValue: () => object;
}
export {};
//# sourceMappingURL=types.d.ts.map